md bot && cd bot
md events && cd events
echo "module.exports = { name: 'interactionCreate', async execute(interaction) { if (!interaction.isCommand()) return; const command = interaction.client.commands.get(interaction.commandName); if (!command) return; try { await command.execute(interaction); } catch (error) { console.error(error); const errorchan = client.channels.cache.get(config.error_channel); const embed = new discord.MessageEmbed().setTitle(`⚠️ERROR⚠️`).setDescription(`error:\n\`\`\`${error}\`\`\``).addField(`User`, interaction.member).setColor(config.color.error); errorchan.send({embeds: [embed]}); return interaction.reply({ content: 'There was an error while executing this command!', ephemeral: true }); }; console.log(`${interaction.user.tag} in #${interaction.channel.name} triggered an interaction.`); }, }; " > interactionCreate.js
echo "const activities = [];module.exports = { name: 'ready', once: true, execute(client) { console.log(`Ready! Logged in as ${client.user.tag}`); client.user.setPresence({ status: 'online', activity: activities[0] }); let activity = 0; setInterval(() => { activities[0] = { name: `/help`, type: 'LISTENING' }; activities[1] = { name: `${client.guilds.cache.size} servers`, type: 'WATCHING' }; activities[2] = { name: `${client.users.cache.size} users`, type: 'WATCHING' }; if (activity > 2) activity = 0; client.user.setActivity(activities[activity]); activity++; }, 10000); }, };" > ready.js && cd ../
md commands && cd commands
md utility
echo "const { SlashCommandBuilder } = require("@discordjs/builders");const wait = require("util").promisify(setTimeout);const config = require("../../config.json");module.exports = {data: new SlashCommandBuilder().setName("ping").setDescription("Returns the average ping of the client!"),async execute(interaction) {const embed = new discord.MessageEmbed().setColor(config.color.info).setTitle(`pinging`);const pembed = new discord.MessageEmbed().setColor(config.color.info).setTitle(`pinged`).setDescription(`${interaction.client.ws.ping} ping`);await interaction.reply({embeds: [embed],});await wait(5000);interaction.deleteReply();await interaction.followUp({embeds: [pembed],});},};" > ./utility/ping.js && cd ../
echo {"token": "","clientId": "","testGuildId": "","state": "1 :: Beta","log_channel": "","error_channel": "","owners": [""],"color": {"info": "#00cfff","main": "#bbaa77","mod": "#ff4f51","events": "#e49500","backup": "#6200ff","error": "#ff6e00"},"emoji": {"loading": ""},"links": {"invite": "","support": ""}} > config.json
echo "const fs = require('fs');const { REST } = require('@discordjs/rest');const { Routes } = require('discord-api-types/v9');const { testGuildId, clientId, token } = require('./config.json');const commands = [];const commandFolders = fs.readdirSync('./commands');for (const folder of commandFolders) {const commandFiles = fs.readdirSync(`./commands/${folder}`).filter(file => file.endsWith('.js'));for (const file of commandFiles) {const command = require(`./commands/${folder}/${file}`);commands.push(command.data.toJSON());}}const rest = new REST({ version: '9' }).setToken(token);rest.put(Routes.applicationGuildCommands(clientId, testGuildId), { body: commands }).then(() => console.log('Successfully registered application commands for in the test guild!')).catch(console.error);" > deploy-commands.js
echo "const fs = require('fs');const { Client, Collection, Intents } = require('discord.js');const Discord = require('discord.js');const { token } = require('./config.json');const config = require("./config.json");const client = new Client({ intents: [Intents.FLAGS.GUILDS,Intents.FLAGS.GUILD_MESSAGE_REACTIONS,Intents.FLAGS.GUILD_MESSAGES] });global.client = client;global.discord = Discord;global.config = config;client.on("guildCreate", (guild) => {const botlogs = client.channels.cache.get(config.log_channel);const embed = new discord.MessageEmbed().setTitle(`${client.user.username} was added to: ${guild.name}`).setDescription(`I'm now in: ${client.guilds.cache.size} servers!`).setColor(config.color.events).setThumbnail(`${guild.iconURL({dynamic: true}) ? guild.iconURL() : client.user.displayAvatarURL({dynamic:true}) }`);botlogs.send({embeds: [embed]});});client.on("guildDelete", (guild) => {const botlogs = client.channels.cache.get(config.log_channel);const embed = new discord.MessageEmbed().setTitle(`${client.user.username} was removed from: ${guild.name}`).setDescription(`I'm now in: ${client.guilds.cache.size} servers!`).setColor(config.color.events).setThumbnail(`${guild.iconURL({dynamic: true}) ? guild.iconURL() : client.user.displayAvatarURL({dynamic:true}) }`);botlogs.send({embeds: [embed]});});console.log('\nloaded in commands\n_________________________________________________________\n');const eventFiles = fs.readdirSync('./events').filter(file => file.endsWith('.js'));for (const file of eventFiles) {const event = require(`./events/${file}`);if (event.once) {client.once(event.name, (...args) => event.execute(...args));} else {client.on(event.name, (...args) => event.execute(...args));}}eventFiles.forEach(file => {console.log(`${file.replace(".js", "")} loaded!`);});const commandFolders = fs.readdirSync('./commands');client.commands = new Collection();for (const folder of commandFolders) {const commandFiles = fs.readdirSync(`./commands/${folder}`).filter(file => file.endsWith('.js'));for (const file of commandFiles) {const command = require(`./commands/${folder}/${file}`);client.commands.set(command.data.name, command);}}console.log('\nloaded in events\n_________________________________________________________\n');client.login(token);" > main.js
echo "console.clear();require(`./deploy-commands`);console.log(`Registering slash commands...`);setTimeout(() => console.log("Starting bot..."), 1000);setTimeout(() => require("./main"), 1000);" > index.js
start npm init -y && start npm install discord.js fs path @discordjs/builders @discordjs/rest
start chrome canary.discord.com/developers
start chrome github.com/commander-r
code .